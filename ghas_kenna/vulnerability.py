
import logging

from ghas_kenna.metadata import CWE_SCORES, CRITICALITY


class Vulnerability(object):
    __IDENTIFIER__ = "CWE-{cwe} :: {path}"

    def __init__(self, result, rule):
        self.result = result
        self.rule = rule

    @property
    def identifier(self):
        """ The Unique string for the Vulnerability
        """
        r = Vulnerability.__IDENTIFIER__.format(
            name=self.name,
            description=self.description,
            cwe=self.cwe,
            path=self.path,
            cvss=self.cvss,
            criticality=self.criticality
        )
        return r

    @property
    def name(self):
        """ Vulnerability Name
        """
        return self.rule.get('shortDescription', {}).get('text')

    @property
    def description(self):
        """ Vulnerability Description
        """
        return self.rule.get('fullDescription', {}).get('text')

    @property
    def vulnerability_type(self):
        """ Vulnerability Type
        """
        return self.rule.get('defaultConfiguration', {}).get('level')

    @property
    def line_number(self):
        # TODO: Need to make sure this doesn't cause issues
        location = self.result.get(
            'locations', [{}])[0].get('physicalLocation', {})
        return str(location.get('region', {}).get('startLine'))

    @property
    def filepath(self):
        # TODO: Need to make sure this doesn't cause issues
        location = self.result.get(
            'locations', [{}])[0].get('physicalLocation', {})
        return location.get('artifactLocation', {}).get('uri')

    @property
    def path(self):
        """ Vulnerability Path Location
        """
        return self.filepath + "#" + self.line_number

    @property
    def cwe(self):
        """ Vulnerability Associated CWE 
        """
        cwes = self.cwes
        return self.cwes[0] if cwes else ""

    @property
    def cwes(self):
        """ Vulnerability Associated CWE 
        """
        cwes = []
        # TODO: This might be quite weak, non-codeql tools might not work
        tags = self.rule.get('properties', {}).get('tags', [])
        for tag in tags:
            tag = tag.lower()
            if tag.startswith('external/cwe/cwe-'):
                cwe = int(tag.replace('external/cwe/cwe-', ''))
                cwes.append("{:03}".format(cwe))
            elif tag.startswith('cwe-'):
                cwe = int(tag.replace('cwe-', ''))
                cwes.append("{:03}".format(cwe))
        return cwes

    @property
    def cvss(self) -> float:
        for cwe, cvss_score in CWE_SCORES:
            cwe = "{:03}".format(cwe)
            if cwe == self.cwe:
                return cvss_score
        # TODO: if we get to here, maybe convery CodeQL issues to X
        return 0

    @property
    def criticality(self):
        cvss = self.cvss
        for name, score, level in CRITICALITY:
            if level <= cvss:
                return (name, score)
        return ('Information', 0)

    @property
    def criticality_name(self):
        return self.criticality[0]

    @property
    def criticality_score(self):
        return self.criticality[1]

    def __str__(self):
        return "Vulnerability(" + self.identifier + ")"
